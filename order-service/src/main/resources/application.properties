spring.datasource.drive-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=mysql
spring.application.name=order-service
spring.jpa.hibernate.ddl-auto=update
server.port=8081
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# to enable circuit breaker in actuator
management.health.circuitbreakers.enabled=true
# to expose all kinds of endpoint
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Resilience4J properties
# to see the health stats like Close Open or Half Open
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.eventConsumerBufferSize=10
# to not open the state from close to open right away, it will count base
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# if 50% requests are failing then the circuit state will be open
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# before going to half open state wait for the 5s,
# don't want to go in close or half open state directly
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# its shows how many  calls will be allowed in half open state
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true


# Resilience4J properties  timeout properties
resilience4j.timelimiter.instances.inventory.timeoutDuration=3s

# Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s


# Zipkin and Sleuth Properties
spring.zipkin.base-url=http://localhost:9411
spring.sleuth.sampler.probability=1.0

# Kakfta Properties
spring.kafka.bootstrap-servers=localhost:9092
# It will be default topic and to send any specific
# topic we have to mention in the even generation class inside the topic
spring.kafka.template.default-topic=notificationTopic
# it will define how the key of the topic will serialize
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.azsultan.orderservice.event.OrderPlacedEvent